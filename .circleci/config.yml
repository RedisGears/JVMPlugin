version: 2.1

commands:
  setup-automation:
    steps:
      - run:
          name: Setup automation
          command: |
            git submodule update --init --recursive
            ./deps/readies/bin/getpy3

jobs:
  build-and-test-bionic:
      docker:
        - image: 'ubuntu:bionic'
      steps:
        - run:
            name: Setup executor
            command: |
              apt-get -qq update
              apt-get -q install -y git openssh-client curl ca-certificates make tar gzip unzip maven
        - checkout
        - setup-automation
        - run:
            name: Install Redis
            command: python3 ./deps/readies/bin/getredis --version 6
        - run:
            name: Install RLTest
            command: python3 -m pip install --no-cache-dir git+https://github.com/RedisLabsModules/RLTest.git@master
        - run:
            name: Tests
            command: make tests
        - run:
            name: Pack
            command: make pack
        - persist_to_workspace:
            root: artifacts
            paths:
              - 'snapshot/*.tgz'
              - 'release/*.tgz'
  build-and-test-centos:
      docker:
        - image: centos:7.8.2003
      steps:
        - run:
            name: Setup executor
            command: |
              yum install -y git openssh-client curl ca-certificates make tar gzip unzip maven
        - checkout
        - setup-automation
        - run:
            name: Install gcc
            command: ./deps/readies/bin/getgcc --modern
        - run:
            name: Install Redis
            command: . /etc/profile.d/scl-devtoolset-9.sh; python3 ./deps/readies/bin/getredis --version 6
        - run:
            name: Install RLTest
            command: python3 -m pip install --no-cache-dir git+https://github.com/RedisLabsModules/RLTest.git@master
        - run:
            name: Tests
            command: OS=rhel OS_VER=7 make tests
        - run:
            name: Pack
            command: make pack
        - persist_to_workspace:
            root: artifacts
            paths:
              - 'snapshot/*.tgz'
              - 'release/*.tgz'
  build-docker:
      docker:
        - image: 'ubuntu:bionic'
      steps:
        - run:
            name: Setup executor
            command: |
              apt-get -qq update
              apt-get -q install -y git openssh-client curl ca-certificates
              bash <(curl -fsSL https://raw.githubusercontent.com/docker/docker-install/master/install.sh)
        - setup_remote_docker:
            docker_layer_caching: true
        - checkout
        - run:
            name: Checkout submodules
            command: |
              git submodule update --init --recursive
        - run:
            name: Build docker and push to Dockerhub
            command: |
              docker login -u redisfab -p $DOCKER_REDISFAB_PWD
              docker build -t redisfab/redisgearsjvm:edge .
              docker push redisfab/redisgearsjvm:edge
  deploy_snapshots:
      docker:
        - image: redisfab/rmbuilder:6.2.5-x64-buster
      steps:
        - attach_workspace:
            at: artifacts
        - run:
            name: Deploy Snapshots to S3
            command: |
              for f in artifacts/snapshot/*.tgz; do
                aws s3 cp $f s3://redismodules/redisgears_plugins/jvm_plugin/snapshots/ --acl public-read
              done
  deploy_release:
      docker:
        - image: redisfab/rmbuilder:6.2.5-x64-buster
      steps:
        - attach_workspace:
            at: artifacts
        - run:
            name: Deploy Snapshots to S3
            command: |
              for f in artifacts/release/*.tgz; do
                aws s3 cp $f s3://redismodules/redisgears_plugins/jvm_plugin/ --acl public-read
              done
on-any-branch: &on-any-branch
  filters:
    branches:
      only: /.*/
    tags:
      only: /.*/

on-master: &on-master
  filters:
    branches:
      only: master

on-version-tags: &on-version-tags
  filters:
    branches:
      ignore: /.*/
    tags:
      only: /^v[0-9].*/

after-build-and-test: &after-build-and-test
  requires:
    - build-and-test-bionic
    - build-and-test-centos

workflows:
  version: 2
  commit:
    jobs:
      - build-and-test-bionic:
          <<: *on-any-branch
      - build-and-test-centos:
          <<: *on-any-branch
      - build-docker:
          context: common
          <<: *on-master
      - deploy_snapshots:
          context: common
          <<: *after-build-and-test
          <<: *on-master
      - deploy_release:
          context: common
          <<: *after-build-and-test
          <<: *on-version-tags

  nightly:
      triggers:
        - schedule:
            cron: "0 0 * * *"
            filters:
              branches:
                only:
                  - master
      jobs:
        - build-and-test-bionic
        - build-and-test-centos
